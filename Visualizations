import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta

# Set the style for better looking plots
plt.style.use('default')
sns.set_palette("husl")

# Create a figure with subplots
fig, axes = plt.subplots(2, 2, figsize=(15, 12))
fig.suptitle('Data Visualization Examples with Iris Dataset', fontsize=16, fontweight='bold')

# 1. LINE CHART (Sales Trend Over Time)
print("1. Creating Line Chart - Sales Trend Over Time")

# Create sample sales data
np.random.seed(42)
dates = pd.date_range(start='2023-01-01', end='2023-12-31', freq='M')
sales_data = {
    'date': dates,
    'sales': np.random.normal(50000, 15000, len(dates)).cumsum() + 100000,
    'expenses': np.random.normal(20000, 5000, len(dates)).cumsum() + 40000
}
sales_df = pd.DataFrame(sales_data)

axes[0, 0].plot(sales_df['date'], sales_df['sales'], marker='o', linewidth=2, label='Sales', color='#2E86AB')
axes[0, 0].plot(sales_df['date'], sales_df['expenses'], marker='s', linewidth=2, label='Expenses', color='#A23B72')
axes[0, 0].set_title('Monthly Sales Trend (2023)', fontweight='bold')
axes[0, 0].set_xlabel('Month')
axes[0, 0].set_ylabel('Amount ($)')
axes[0, 0].legend()
axes[0, 0].grid(True, alpha=0.3)
axes[0, 0].tick_params(axis='x', rotation=45)

# 2. BAR CHART (Average Measurements by Species)
print("2. Creating Bar Chart - Average Measurements by Species")

# Load Iris dataset
url = "https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"
column_names = ['sepal_length', 'sepal_width', 'petal_length', 'petal_width', 'species']
iris_df = pd.read_csv(url, names=column_names)

# Calculate averages
species_avg = iris_df.groupby('species').mean()

# Create bar chart
x = np.arange(len(species_avg.index))
width = 0.2

bars1 = axes[0, 1].bar(x - width*1.5, species_avg['sepal_length'], width, label='Sepal Length', color='#FF6B6B')
bars2 = axes[0, 1].bar(x - width*0.5, species_avg['sepal_width'], width, label='Sepal Width', color='#4ECDC4')
bars3 = axes[0, 1].bar(x + width*0.5, species_avg['petal_length'], width, label='Petal Length', color='#FFE66D')
bars4 = axes[0, 1].bar(x + width*1.5, species_avg['petal_width'], width, label='Petal Width', color='#6A0572')

axes[0, 1].set_title('Average Measurements by Iris Species', fontweight='bold')
axes[0, 1].set_xlabel('Species')
axes[0, 1].set_ylabel('Measurement (cm)')
axes[0, 1].set_xticks(x)
axes[0, 1].set_xticklabels(species_avg.index)
axes[0, 1].legend()
axes[0, 1].grid(True, alpha=0.3, axis='y')

# Add value labels on bars
for bars in [bars1, bars2, bars3, bars4]:
    for bar in bars:
        height = bar.get_height()
        axes[0, 1].text(bar.get_x() + bar.get_width()/2., height + 0.05,
                       f'{height:.1f}', ha='center', va='bottom', fontsize=8)

# 3. HISTOGRAM (Distribution of Sepal Length)
print("3. Creating Histogram - Distribution of Sepal Length")

# Create histogram with density curve
axes[1, 0].hist(iris_df['sepal_length'], bins=15, alpha=0.7, color='#5C80BC', edgecolor='black', density=True)

# Add density curve
sns.kdeplot(iris_df['sepal_length'], ax=axes[1, 0], color='#4D0C4D', linewidth=2)

axes[1, 0].set_title('Distribution of Sepal Length', fontweight='bold')
axes[1, 0].set_xlabel('Sepal Length (cm)')
axes[1, 0].set_ylabel('Density')
axes[1, 0].grid(True, alpha=0.3)

# Add statistical annotations
mean_val = iris_df['sepal_length'].mean()
median_val = iris_df['sepal_length'].median()
axes[1, 0].axvline(mean_val, color='red', linestyle='--', linewidth=2, label=f'Mean: {mean_val:.2f}cm')
axes[1, 0].axvline(median_val, color='green', linestyle='--', linewidth=2, label=f'Median: {median_val:.2f}cm')
axes[1, 0].legend()

# 4. SCATTER PLOT (Sepal Length vs Petal Length by Species)
print("4. Creating Scatter Plot - Sepal Length vs Petal Length")

# Create scatter plot with different colors for each species
colors = {'Iris-setosa': '#FF6B6B', 'Iris-versicolor': '#4ECDC4', 'Iris-virginica': '#45B7D1'}

for species in iris_df['species'].unique():
    species_data = iris_df[iris_df['species'] == species]
    axes[1, 1].scatter(species_data['sepal_length'], species_data['petal_length'], 
                      alpha=0.7, s=60, label=species, color=colors[species])

axes[1, 1].set_title('Sepal Length vs Petal Length by Species', fontweight='bold')
axes[1, 1].set_xlabel('Sepal Length (cm)')
axes[1, 1].set_ylabel('Petal Length (cm)')
axes[1, 1].legend()
axes[1, 1].grid(True, alpha=0.3)

# Add correlation line
z = np.polyfit(iris_df['sepal_length'], iris_df['petal_length'], 1)
p = np.poly1d(z)
axes[1, 1].plot(iris_df['sepal_length'], p(iris_df['sepal_length']), "r--", alpha=0.8, linewidth=2)

# Add correlation coefficient
correlation = iris_df['sepal_length'].corr(iris_df['petal_length'])
axes[1, 1].text(0.05, 0.95, f'Correlation: {correlation:.2f}', transform=axes[1, 1].transAxes, 
               bbox=dict(boxstyle="round,pad=0.3", facecolor="yellow", alpha=0.7))

# Adjust layout and display
plt.tight_layout()
plt.subplots_adjust(top=0.93)
plt.show()

print("All visualizations completed successfully!")

# Display some statistics about the datasets
print("\n" + "="*60)
print("DATASET SUMMARY")
print("="*60)
print("Iris Dataset:")
print(f"Shape: {iris_df.shape}")
print(f"Species: {iris_df['species'].unique().tolist()}")
print(f"Sepal Length range: {iris_df['sepal_length'].min():.1f}cm - {iris_df['sepal_length'].max():.1f}cm")
print(f"Petal Length range: {iris_df['petal_length'].min():.1f}cm - {iris_df['petal_length'].max():.1f}cm")

print("\nSales Dataset:")
print(f"Shape: {sales_df.shape}")
print(f"Sales period: {sales_df['date'].min().strftime('%Y-%m-%d')} to {sales_df['date'].max().strftime('%Y-%m-%d')}")
print(f"Total sales: ${sales_df['sales'].sum():,.2f}")
